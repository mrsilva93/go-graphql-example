package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"time"

	"github.com/mauricio-pagarme/graphql-teste/graph"
	"github.com/mauricio-pagarme/graphql-teste/graph/model"
)

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.TransactionInput) (*model.Transaction, error) {
	formatDate, _ := time.Parse("2006-01-02", input.Date)
	Transaction, err := r.TransactionDB.Create(input.TransactionTypeID, input.UserID, input.Value, formatDate)
	if err != nil {
		return nil, err
	}
	return &model.Transaction{
		ID:              Transaction.ID,
		Value:           Transaction.Value,
		User:            &model.User{ID: Transaction.UserId},
		TransactionType: &model.TransactionType{ID: Transaction.TransactionTypeId},
		Date:            Transaction.Date.Format("2006-01-02"),
	}, nil
}

// UpdateTransaction is the resolver for the updateTransaction field.
func (r *mutationResolver) UpdateTransaction(ctx context.Context, id string, input model.TransactionInput) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: UpdateTransaction - updateTransaction"))
}

// DeleteTransaction is the resolver for the deleteTransaction field.
func (r *mutationResolver) DeleteTransaction(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTransaction - deleteTransaction"))
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context, filter *model.TransactionFilter) ([]*model.Transaction, error) {
	transactions, err := r.TransactionDB.FindAll(nil, filter)
	if err != nil {
		return nil, err
	}

	transactionModel := []*model.Transaction{}

	for _, t := range transactions {

		transactionModel = append(transactionModel, &model.Transaction{
			ID:    t.ID,
			Value: t.Value,
			Date:  t.Date.Format("2006-01-02"),
			TransactionType: &model.TransactionType{
				ID: t.TransactionTypeId,
			},
			User: &model.User{
				ID: t.UserId,
			},
		})
	}
	return transactionModel, nil
}

// TransactionType is the resolver for the transactionType field.
func (r *transactionResolver) TransactionType(ctx context.Context, obj *model.Transaction) (*model.TransactionType, error) {
	tp, err := r.TransactionTypeDB.FindById(obj.TransactionType.ID)
	if err != nil {
		return nil, err
	}

	return &model.TransactionType{
		Name:        tp.Name,
		Description: &tp.Description,
		ID:          tp.ID,
	}, nil
}

// User is the resolver for the user field.
func (r *transactionResolver) User(ctx context.Context, obj *model.Transaction) (*model.User, error) {
	user, err := r.UserDB.FindById(obj.User.ID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		Name: user.Name,
		Cnpj: user.Cnpj,
		ID:   user.ID,
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Transaction returns graph.TransactionResolver implementation.
func (r *Resolver) Transaction() graph.TransactionResolver { return &transactionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type transactionResolver struct{ *Resolver }
