package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/mauricio-pagarme/graphql-teste/graph"
	"github.com/mauricio-pagarme/graphql-teste/graph/model"
)

// CreateTransactionType is the resolver for the createTransactionType field.
func (r *mutationResolver) CreateTransactionType(ctx context.Context, input model.TransactionTypeInput) (*model.TransactionType, error) {
	transactionType, err := r.TransactionTypeDB.Create(input.Name, *input.Description)
	if err != nil {
		return nil, err
	}
	return &model.TransactionType{
		ID:          transactionType.ID,
		Name:        transactionType.Name,
		Description: &transactionType.Description,
	}, nil
}

// UpdateTransactionType is the resolver for the updateTransactionType field.
func (r *mutationResolver) UpdateTransactionType(ctx context.Context, id string, input model.TransactionTypeInput) (*model.TransactionType, error) {
	panic(fmt.Errorf("not implemented: UpdateTransactionType - updateTransactionType"))
}

// DeleteTransactionType is the resolver for the deleteTransactionType field.
func (r *mutationResolver) DeleteTransactionType(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTransactionType - deleteTransactionType"))
}

// TransactionTypes is the resolver for the transactionTypes field.
func (r *queryResolver) TransactionTypes(ctx context.Context) ([]*model.TransactionType, error) {
	transactionTypes, err := r.TransactionTypeDB.FindAll()
	if err != nil {
		return nil, err
	}

	var transactionTypesModel []*model.TransactionType
	for _, transactionType := range transactionTypes {
		transactionTypesModel = append(transactionTypesModel, &model.TransactionType{
			ID:          transactionType.ID,
			Name:        transactionType.Name,
			Description: &transactionType.Description,
		})
	}

	return transactionTypesModel, nil
}

// Transactions is the resolver for the transactions field.
func (r *transactionTypeResolver) Transactions(ctx context.Context, obj *model.TransactionType) ([]*model.Transaction, error) {
	transactions, err := r.TransactionDB.FindAll(&obj.ID, nil)
	if err != nil {
		return nil, err
	}

	transactionModel := []*model.Transaction{}

	for _, t := range transactions {

		transactionModel = append(transactionModel, &model.Transaction{
			ID:    t.ID,
			Value: t.Value,
			Date:  t.Date.Format("2006-01-02"),
		})
	}
	return transactionModel, nil
}

// TransactionType returns graph.TransactionTypeResolver implementation.
func (r *Resolver) TransactionType() graph.TransactionTypeResolver {
	return &transactionTypeResolver{r}
}

type transactionTypeResolver struct{ *Resolver }
